### Understanding URIs and Resources
- **URI (Uniform Resource Identifier)**: It's like an address that you use to locate a specific resource on the web.
- **Resource**: Anything that can be identified by a URI, such as a webpage, a document, or an entry in a database.

### POST and PUT in HTTP

#### POST Method
- **Purpose**: Create a new resource.
- **How It Works**:
  - When you use `POST`, you send data to a server to create a new resource.
  - The server decides the URI (address) for the new resource.
  - Example: In a Cash Card API, when you want to create a new cash card, you might send a request to `POST /cashcards`. The server then creates the new cash card and assigns it a unique ID, like `/cashcards/101`.

##### Example
1. **Client Request**:
   ```http
   POST /cashcards
   ```
   - You send the request to `/cashcards` to create a new cash card.

2. **Server Response**:
   ```http
   HTTP/1.1 201 Created
   Location: /cashcards/101
   ```
   - The server creates the new cash card and responds with a `201 Created` status.
   - The new resource's URI is `/cashcards/101`, where `101` is the unique ID generated by the server.

#### PUT Method
- **Purpose**: Create or update a resource at a specific URI.
- **How It Works**:
  - When you use `PUT`, you send data to create or update a resource at a specific URI.
  - The client specifies the URI (address) for the resource.
  - Example: If you want to create or update an invoice with a specific ID, you might send a request to `PUT /invoices/1234-567`. The server will create or update the resource at that exact URI.

##### Example
1. **Client Request**:
   ```http
   PUT /invoices/1234-567
   ```
   - You send the request to `/invoices/1234-567` to create or update the invoice with ID `1234-567`.

2. **Server Response**:
   ```http
   HTTP/1.1 200 OK
   ```
   - The server creates or updates the invoice at the specified URI and responds with a `200 OK` status.

### Key Differences
- **POST**:
  - Creates a new resource.
  - The server generates the URI for the new resource.
  - Example: `POST /cashcards` results in a new resource like `/cashcards/101`.

- **PUT**:
  - Creates or updates a resource at a specific URI.
  - The client specifies the URI for the resource.
  - Example: `PUT /invoices/1234-567` creates or updates the resource at `/invoices/1234-567`.

### Why Is This Important?
Understanding the difference helps in designing APIs and using them correctly:
- Use `POST` when you don't know the URI of the resource beforehand and want the server to generate it.
- Use `PUT` when you know the URI of the resource and either want to create it or update it at that specific location.
